Node
    Instale a última versão do Node JS com o gerenciador de versões do Node - NVM
    https://nodejs.org/en/download/package-manager/#nvm
Yarn
    Gerenciador de pacotes para instalações como o apt do Linux
    https://classic.yarnpkg.com/pt-BR/docs/install/#debian-stable
    Inicie o Yarn para criar o arquivo package.json
        yarn init
    Instale as dependências
    yarn add <dependencia>
Babel
    Converter o código para que o navegador entenda
    Para trabalhar com linha de comando
        yarn add @babel/cli
    Instale PRESET
        yarn add @babel/preset-env
    Instale CORE
        yarn add @babel/core
    Em package.json, configure como serão executados os scripts abaixo de dependencies:
        ...
        "dependencies": {
            "@babel/cli": "^7.8.4",
            "@babel/core": "^7.9.0",
            "@babel/preset-env": "^7.9.5"
        },
        "scripts": {
            "dev": "babel ./main.js -0 ./bundle.js -w"
        }
        }
        O -w serve para atualizar automaticamente o bundle.js de acordo com o código do projeto
    Execute o script dev para que o Babel transforme o código ES6 para o navegador como class em function
        yarn dev
    Crie o arquivo .babelrc na raiz do projeto para configurar o Babel com o conteúdo:
        {
            "presets": ["@babel/preset-env"]
        }
REST / SPREAD
    Necessário instalar o pacote para funcionar com Babel
    yarn add @babel/plugin-proposal-object-rest-spread
    Dentro do arquivo .babelrc é necessário colocar os plugins abaixo dos presets
        {
            "presets": ["@babel/preset-env"],
            "plugins": ["@babel/plugin-proposal-object-rest-spread"]
        }

STATIC
    Quando usado dentro de uma classe ele não enxergará o restante da classe (o que estiver fora desse método).
    Fará uma operação e retornará o valor independente de qualquer outro método ou var/const/this.
    Nesse caso nem precisa de constructor como no exemplo abaixo:
    class Matematica {
        static soma(a, b) {
            return a + b;
        }
        console.log(Matematica.soma(1, 2));
    }

CONST
    const não pode ter seu valor alterado como em var.
    const a = 1;
    Se tentar alterar a:
    a = 3;
    Irá gerar um erro informando que seu valor não pode ser alterado porque é uma constante.
    Mas o valor em const pode ser MUTÁVEL como:
    const usuario = { nome: 'Amauri' };
    usuario.nome = 'Rossetti';
    console.log(usuario);

LET
    let só é enxergado dentro do escopo, ou seja, entre os parênteses da função
    function teste(x) {
        let y = 2;
        if(x > 5) {
            console.log(y);
        }
    }

    teste(10);

    Se tentar enxergar o y aqui, fora do escopo, dará erro:
    console.log(y);


const arr = [1, 3, 4, 5, 8, 9];

// MAP
// percorre arr obtendo o item e a posição (index)
const newArr = arr.map(function(item, index) {
    return item + index;
});

console.log(newArr);


// REDUCE
// soma os itens e retorna o total
// na primeira vez o total será 0 e next será 1
// na segunda vez o total será 1 e next será 3
const sum = arr.reduce(function(total, next) {
    return total + next;
});

console.log(sum);


// FILTER
// filtrará somente os números pares
const filter = arr.filter(function(item) {
    return item % 2 === 0;
})

console.log(filter);



// FIND
// procura uma informação no array
// no exemplo verifica se existe o 3 e retorna 3 porque o return será true
// se fosse return item === 2; retornaria undefined
const find = arr.find(function(item) {
    return item === 3;
})

console.log(find);



// ARROW FUNCTIONS E VALORES PADRÃO PARA OS PARÂMETROS
// Arquivo arrowFunctions.js

// DESESTRUTURAÇÃO
// Arquivo desestruturacao.js

// REST
// Arquivo rest.js




Webpack
        Servidor para o navegador atualizar automaticamente de acordo com o código